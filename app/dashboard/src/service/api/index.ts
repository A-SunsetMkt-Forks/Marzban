/**
 * Generated by orval v6.20.0 üç∫
 * Do not edit manually.
 * MarzbanAPI
 * Unified GUI Censorship Resistant Solution Powered by Xray
 * OpenAPI spec version: 0.4.1
 */
import { useMutation, useQuery } from "react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult,
} from "react-query";
import { orvalFetcher } from "../http";
import type { ErrorType, BodyType } from "../http";
export type GetUsageApiNodesUsageGetParams = {
  start?: string;
  end?: string;
};

export type GetUserTemplatesApiUserTemplateGetParams = {
  offset?: number;
  limit?: number;
};

export type DeleteExpiredApiUsersExpiredDeleteParams = {
  passed_time: number;
};

export type SetOwnerApiUserUsernameSetOwnerPutParams = {
  admin_username: string;
};

export type GetUserUsageApiUserUsernameUsageGetParams = {
  start?: string;
  end?: string;
};

export type GetUsersApiUsersGetParams = {
  offset?: number;
  limit?: number;
  username?: string;
  status?: UserStatus;
  sort?: string;
};

export type ModifyCoreConfigApiCoreConfigPut200 = { [key: string]: any };

export type ModifyCoreConfigApiCoreConfigPutBody = { [key: string]: any };

export type GetCoreConfigApiCoreConfigGet200 = { [key: string]: any };

export type ModifyHostsApiHostsPut200 = { [key: string]: ProxyHost[] };

export type ModifyHostsApiHostsPutBody = { [key: string]: ProxyHost[] };

export type GetHostsApiHostsGet200 = { [key: string]: ProxyHost[] };

export type GetInboundsApiInboundsGet200 = { [key: string]: ProxyInbound[] };

export type GetAdminsApiAdminsGetParams = {
  offset?: number;
  limit?: number;
  username?: string;
};

export type ValidationErrorLocItem = string | number;

export interface ValidationError {
  loc: ValidationErrorLocItem[];
  msg: string;
  type: string;
}

export interface UsersResponse {
  total: number;
  users: UserResponse[];
}

export interface UserUsageResponse {
  node_id?: number;
  node_name: string;
  used_traffic: number;
}

export interface UserUsagesResponse {
  usages: UserUsageResponse[];
  username: string;
}

export type UserTemplateResponseInbounds = { [key: string]: string[] };

export interface UserTemplateResponse {
  /** data_limit can be 0 or greater */
  data_limit?: number;
  /** expire_duration can be 0 or greater in seconds */
  expire_duration?: number;
  id: number;
  inbounds?: UserTemplateResponseInbounds;
  name?: string | null;
  username_prefix?: string;
  username_suffix?: string;
}

export type UserTemplateModifyInbounds = { [key: string]: string[] };

export interface UserTemplateModify {
  /** data_limit can be 0 or greater */
  data_limit?: number;
  /** expire_duration can be 0 or greater in seconds */
  expire_duration?: number;
  inbounds?: UserTemplateModifyInbounds;
  name?: string | null;
  username_prefix?: string;
  username_suffix?: string;
}

export type UserTemplateCreateInbounds = { [key: string]: string[] };

export interface UserTemplateCreate {
  /** data_limit can be 0 or greater */
  data_limit?: number;
  /** expire_duration can be 0 or greater in seconds */
  expire_duration?: number;
  inbounds?: UserTemplateCreateInbounds;
  name?: string | null;
  username_prefix?: string;
  username_suffix?: string;
}

/**
 * An enumeration.
 */
export type UserStatusModify =
  (typeof UserStatusModify)[keyof typeof UserStatusModify];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserStatusModify = {
  active: "active",
  disabled: "disabled",
  on_hold: "on_hold",
} as const;

/**
 * An enumeration.
 */
export type UserStatusCreate =
  (typeof UserStatusCreate)[keyof typeof UserStatusCreate];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserStatusCreate = {
  active: "active",
  on_hold: "on_hold",
} as const;

/**
 * An enumeration.
 */
export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserStatus = {
  active: "active",
  disabled: "disabled",
  limited: "limited",
  expired: "expired",
  on_hold: "on_hold",
} as const;

export type UserResponseProxies = { [key: string]: any };

export type UserResponseInbounds = { [key: string]: string[] };

export type UserResponseExcludedInbounds = { [key: string]: string[] };

export interface UserResponse {
  created_at: string;
  /** data_limit can be 0 or greater */
  data_limit?: number;
  data_limit_reset_strategy?: UserDataLimitResetStrategy;
  excluded_inbounds?: UserResponseExcludedInbounds;
  expire?: number | null;
  inbounds?: UserResponseInbounds;
  lifetime_used_traffic?: number;
  links?: string[];
  note?: string | null;
  on_hold_expire_duration?: number | null;
  on_hold_timeout?: string | null;
  online_at?: string | null;
  proxies: UserResponseProxies;
  status: UserStatus;
  sub_last_user_agent?: string | null;
  sub_updated_at?: string | null;
  subscription_url?: string;
  used_traffic: number;
  username: string;
}

export type UserModifyProxies = { [key: string]: ProxySettings };

export type UserModifyInbounds = { [key: string]: string[] };

/**
 * An enumeration.
 */
export type UserDataLimitResetStrategy =
  (typeof UserDataLimitResetStrategy)[keyof typeof UserDataLimitResetStrategy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UserDataLimitResetStrategy = {
  no_reset: "no_reset",
  day: "day",
  week: "week",
  month: "month",
  year: "year",
} as const;

export interface UserModify {
  /** data_limit can be 0 or greater */
  data_limit?: number;
  data_limit_reset_strategy?: UserDataLimitResetStrategy;
  expire?: number | null;
  inbounds?: UserModifyInbounds;
  note?: string | null;
  on_hold_expire_duration?: number | null;
  on_hold_timeout?: string | null;
  online_at?: string | null;
  proxies?: UserModifyProxies;
  status?: UserStatusModify;
  sub_last_user_agent?: string | null;
  sub_updated_at?: string | null;
}

export type UserCreateProxies = { [key: string]: ProxySettings };

export type UserCreateInbounds = { [key: string]: string[] };

export interface UserCreate {
  /** data_limit can be 0 or greater */
  data_limit?: number;
  data_limit_reset_strategy?: UserDataLimitResetStrategy;
  expire?: number | null;
  inbounds?: UserCreateInbounds;
  note?: string | null;
  on_hold_expire_duration?: number | null;
  on_hold_timeout?: string | null;
  online_at?: string | null;
  proxies?: UserCreateProxies;
  status?: UserStatusCreate;
  sub_last_user_agent?: string | null;
  sub_updated_at?: string | null;
  username: string;
}

export interface Token {
  access_token: string;
  token_type?: string;
}

export interface SystemStats {
  cpu_cores: number;
  cpu_usage: number;
  incoming_bandwidth: number;
  incoming_bandwidth_speed: number;
  mem_total: number;
  mem_used: number;
  outgoing_bandwidth: number;
  outgoing_bandwidth_speed: number;
  total_user: number;
  users_active: number;
  version: string;
}

/**
 * An enumeration.
 */
export type ProxyTypes = (typeof ProxyTypes)[keyof typeof ProxyTypes];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProxyTypes = {
  vmess: "vmess",
  vless: "vless",
  trojan: "trojan",
  shadowsocks: "shadowsocks",
} as const;

export interface ProxySettings {
  [key: string]: any;
}

export type ProxyInboundPort = number | string;

export interface ProxyInbound {
  network: string;
  port: ProxyInboundPort;
  protocol: ProxyTypes;
  tag: string;
  tls: string;
}

/**
 * An enumeration.
 */
export type ProxyHostSecurity =
  (typeof ProxyHostSecurity)[keyof typeof ProxyHostSecurity];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProxyHostSecurity = {
  inbound_default: "inbound_default",
  none: "none",
  tls: "tls",
} as const;

/**
 * An enumeration.
 */
export type ProxyHostFingerprint =
  (typeof ProxyHostFingerprint)[keyof typeof ProxyHostFingerprint];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProxyHostFingerprint = {
  "": "",
  chrome: "chrome",
  firefox: "firefox",
  safari: "safari",
  ios: "ios",
  android: "android",
  edge: "edge",
  NUMBER_360: "360",
  qq: "qq",
  random: "random",
  randomized: "randomized",
} as const;

/**
 * An enumeration.
 */
export type ProxyHostALPN = (typeof ProxyHostALPN)[keyof typeof ProxyHostALPN];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProxyHostALPN = {
  "": "",
  h2: "h2",
  "http/11": "http/1.1",
  "h2,http/11": "h2,http/1.1",
} as const;

export interface ProxyHost {
  address: string;
  allowinsecure?: boolean;
  alpn?: ProxyHostALPN;
  fingerprint?: ProxyHostFingerprint;
  host?: string | null;
  is_disabled?: boolean;
  port?: number | null;
  remark: string;
  security?: ProxyHostSecurity;
  sni?: string | null;
}

export interface NodeUsageResponse {
  downlink: number;
  node_id?: number;
  node_name: string;
  uplink: number;
}

export interface NodesUsageResponse {
  usages: NodeUsageResponse[];
}

/**
 * An enumeration.
 */
export type NodeStatus = (typeof NodeStatus)[keyof typeof NodeStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const NodeStatus = {
  connected: "connected",
  connecting: "connecting",
  error: "error",
  disabled: "disabled",
} as const;

export interface NodeSettings {
  certificate: string;
  min_node_version?: string;
}

export interface NodeResponse {
  address: string;
  api_port?: number;
  id: number;
  message?: string;
  name: string;
  port?: number;
  status: NodeStatus;
  usage_coefficient?: number;
  xray_version?: string;
}

export type NodeModifyStatus = NodeStatus | null;

export interface NodeModify {
  address?: string | null;
  api_port?: number | null;
  name?: string | null;
  port?: number | null;
  status?: NodeModifyStatus;
  usage_coefficient?: number | null;
}

export interface NodeCreate {
  add_as_new_host?: boolean;
  address: string;
  api_port?: number;
  name: string;
  port?: number;
  usage_coefficient?: number;
}

export interface HTTPValidationError {
  detail?: ValidationError[];
}

export interface CoreStats {
  logs_websocket: string;
  started: boolean;
  version: string;
}

export interface BodyLoginForAccessTokenApiAdminTokenPost {
  client_id?: string;
  client_secret?: string;
  grant_type?: string;
  password: string;
  scope?: string;
  username: string;
}

export interface AdminModify {
  is_sudo: boolean;
  password: string;
}

export interface AdminCreate {
  is_sudo: boolean;
  password: string;
  username: string;
}

export interface Admin {
  is_sudo: boolean;
  username: string;
}

/**
 * @summary Login For Access Token
 */
export const loginForAccessTokenApiAdminTokenPost = (
  bodyLoginForAccessTokenApiAdminTokenPost: BodyType<BodyLoginForAccessTokenApiAdminTokenPost>
) => {
  const formUrlEncoded = new URLSearchParams();
  if (bodyLoginForAccessTokenApiAdminTokenPost.grant_type !== undefined) {
    formUrlEncoded.append(
      "grant_type",
      bodyLoginForAccessTokenApiAdminTokenPost.grant_type
    );
  }
  formUrlEncoded.append(
    "username",
    bodyLoginForAccessTokenApiAdminTokenPost.username
  );
  formUrlEncoded.append(
    "password",
    bodyLoginForAccessTokenApiAdminTokenPost.password
  );
  if (bodyLoginForAccessTokenApiAdminTokenPost.scope !== undefined) {
    formUrlEncoded.append(
      "scope",
      bodyLoginForAccessTokenApiAdminTokenPost.scope
    );
  }
  if (bodyLoginForAccessTokenApiAdminTokenPost.client_id !== undefined) {
    formUrlEncoded.append(
      "client_id",
      bodyLoginForAccessTokenApiAdminTokenPost.client_id
    );
  }
  if (bodyLoginForAccessTokenApiAdminTokenPost.client_secret !== undefined) {
    formUrlEncoded.append(
      "client_secret",
      bodyLoginForAccessTokenApiAdminTokenPost.client_secret
    );
  }

  return orvalFetcher<Token>({
    url: `/api/admin/token`,
    method: "post",
    headers: { "Content-Type": "application/x-www-form-urlencoded" },
    data: formUrlEncoded,
  });
};

export const getLoginForAccessTokenApiAdminTokenPostMutationOptions = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loginForAccessTokenApiAdminTokenPost>>,
    TError,
    { data: BodyType<BodyLoginForAccessTokenApiAdminTokenPost> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof loginForAccessTokenApiAdminTokenPost>>,
  TError,
  { data: BodyType<BodyLoginForAccessTokenApiAdminTokenPost> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof loginForAccessTokenApiAdminTokenPost>>,
    { data: BodyType<BodyLoginForAccessTokenApiAdminTokenPost> }
  > = (props) => {
    const { data } = props ?? {};

    return loginForAccessTokenApiAdminTokenPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginForAccessTokenApiAdminTokenPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof loginForAccessTokenApiAdminTokenPost>>
>;
export type LoginForAccessTokenApiAdminTokenPostMutationBody =
  BodyType<BodyLoginForAccessTokenApiAdminTokenPost>;
export type LoginForAccessTokenApiAdminTokenPostMutationError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Login For Access Token
 */
export const useLoginForAccessTokenApiAdminTokenPost = <
  TError = ErrorType<HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loginForAccessTokenApiAdminTokenPost>>,
    TError,
    { data: BodyType<BodyLoginForAccessTokenApiAdminTokenPost> },
    TContext
  >;
}) => {
  const mutationOptions =
    getLoginForAccessTokenApiAdminTokenPostMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get Current Admin
 */
export const getCurrentAdminApiAdminGet = (signal?: AbortSignal) => {
  return orvalFetcher<Admin>({ url: `/api/admin`, method: "get", signal });
};

export const getGetCurrentAdminApiAdminGetQueryKey = () => {
  return [`/api/admin`] as const;
};

export const getGetCurrentAdminApiAdminGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getCurrentAdminApiAdminGet>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentAdminApiAdminGet>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCurrentAdminApiAdminGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCurrentAdminApiAdminGet>>
  > = ({ signal }) => getCurrentAdminApiAdminGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentAdminApiAdminGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCurrentAdminApiAdminGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCurrentAdminApiAdminGet>>
>;
export type GetCurrentAdminApiAdminGetQueryError = ErrorType<unknown>;

/**
 * @summary Get Current Admin
 */
export const useGetCurrentAdminApiAdminGet = <
  TData = Awaited<ReturnType<typeof getCurrentAdminApiAdminGet>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getCurrentAdminApiAdminGet>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCurrentAdminApiAdminGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Create Admin
 */
export const createAdminApiAdminPost = (adminCreate: BodyType<AdminCreate>) => {
  return orvalFetcher<Admin>({
    url: `/api/admin`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: adminCreate,
  });
};

export const getCreateAdminApiAdminPostMutationOptions = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAdminApiAdminPost>>,
    TError,
    { data: BodyType<AdminCreate> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAdminApiAdminPost>>,
  TError,
  { data: BodyType<AdminCreate> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAdminApiAdminPost>>,
    { data: BodyType<AdminCreate> }
  > = (props) => {
    const { data } = props ?? {};

    return createAdminApiAdminPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateAdminApiAdminPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAdminApiAdminPost>>
>;
export type CreateAdminApiAdminPostMutationBody = BodyType<AdminCreate>;
export type CreateAdminApiAdminPostMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Create Admin
 */
export const useCreateAdminApiAdminPost = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAdminApiAdminPost>>,
    TError,
    { data: BodyType<AdminCreate> },
    TContext
  >;
}) => {
  const mutationOptions = getCreateAdminApiAdminPostMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Modify Admin
 */
export const modifyAdminApiAdminUsernamePut = (
  username: string,
  adminModify: BodyType<AdminModify>
) => {
  return orvalFetcher<Admin>({
    url: `/api/admin/${username}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: adminModify,
  });
};

export const getModifyAdminApiAdminUsernamePutMutationOptions = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof modifyAdminApiAdminUsernamePut>>,
    TError,
    { username: string; data: BodyType<AdminModify> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof modifyAdminApiAdminUsernamePut>>,
  TError,
  { username: string; data: BodyType<AdminModify> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof modifyAdminApiAdminUsernamePut>>,
    { username: string; data: BodyType<AdminModify> }
  > = (props) => {
    const { username, data } = props ?? {};

    return modifyAdminApiAdminUsernamePut(username, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ModifyAdminApiAdminUsernamePutMutationResult = NonNullable<
  Awaited<ReturnType<typeof modifyAdminApiAdminUsernamePut>>
>;
export type ModifyAdminApiAdminUsernamePutMutationBody = BodyType<AdminModify>;
export type ModifyAdminApiAdminUsernamePutMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Modify Admin
 */
export const useModifyAdminApiAdminUsernamePut = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof modifyAdminApiAdminUsernamePut>>,
    TError,
    { username: string; data: BodyType<AdminModify> },
    TContext
  >;
}) => {
  const mutationOptions =
    getModifyAdminApiAdminUsernamePutMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Remove Admin
 */
export const removeAdminApiAdminUsernameDelete = (username: string) => {
  return orvalFetcher<unknown>({
    url: `/api/admin/${username}`,
    method: "delete",
  });
};

export const getRemoveAdminApiAdminUsernameDeleteMutationOptions = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeAdminApiAdminUsernameDelete>>,
    TError,
    { username: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeAdminApiAdminUsernameDelete>>,
  TError,
  { username: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeAdminApiAdminUsernameDelete>>,
    { username: string }
  > = (props) => {
    const { username } = props ?? {};

    return removeAdminApiAdminUsernameDelete(username);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveAdminApiAdminUsernameDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeAdminApiAdminUsernameDelete>>
>;

export type RemoveAdminApiAdminUsernameDeleteMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Remove Admin
 */
export const useRemoveAdminApiAdminUsernameDelete = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeAdminApiAdminUsernameDelete>>,
    TError,
    { username: string },
    TContext
  >;
}) => {
  const mutationOptions =
    getRemoveAdminApiAdminUsernameDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get Admins
 */
export const getAdminsApiAdminsGet = (
  params?: GetAdminsApiAdminsGetParams,
  signal?: AbortSignal
) => {
  return orvalFetcher<Admin[]>({
    url: `/api/admins`,
    method: "get",
    params,
    signal,
  });
};

export const getGetAdminsApiAdminsGetQueryKey = (
  params?: GetAdminsApiAdminsGetParams
) => {
  return [`/api/admins`, ...(params ? [params] : [])] as const;
};

export const getGetAdminsApiAdminsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getAdminsApiAdminsGet>>,
  TError = ErrorType<void | HTTPValidationError>
>(
  params?: GetAdminsApiAdminsGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAdminsApiAdminsGet>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAdminsApiAdminsGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAdminsApiAdminsGet>>
  > = ({ signal }) => getAdminsApiAdminsGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAdminsApiAdminsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAdminsApiAdminsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAdminsApiAdminsGet>>
>;
export type GetAdminsApiAdminsGetQueryError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Get Admins
 */
export const useGetAdminsApiAdminsGet = <
  TData = Awaited<ReturnType<typeof getAdminsApiAdminsGet>>,
  TError = ErrorType<void | HTTPValidationError>
>(
  params?: GetAdminsApiAdminsGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getAdminsApiAdminsGet>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAdminsApiAdminsGetQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Subscription link, V2ray and Clash supported
 * @summary User Subscription
 */
export const userSubscriptionSubTokenGet = (
  token: string,
  signal?: AbortSignal
) => {
  return orvalFetcher<unknown>({
    url: `/sub/${token}/`,
    method: "get",
    signal,
  });
};

export const getUserSubscriptionSubTokenGetQueryKey = (token: string) => {
  return [`/sub/${token}/`] as const;
};

export const getUserSubscriptionSubTokenGetQueryOptions = <
  TData = Awaited<ReturnType<typeof userSubscriptionSubTokenGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  token: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof userSubscriptionSubTokenGet>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getUserSubscriptionSubTokenGetQueryKey(token);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userSubscriptionSubTokenGet>>
  > = ({ signal }) => userSubscriptionSubTokenGet(token, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!token,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof userSubscriptionSubTokenGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UserSubscriptionSubTokenGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof userSubscriptionSubTokenGet>>
>;
export type UserSubscriptionSubTokenGetQueryError =
  ErrorType<HTTPValidationError>;

/**
 * @summary User Subscription
 */
export const useUserSubscriptionSubTokenGet = <
  TData = Awaited<ReturnType<typeof userSubscriptionSubTokenGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  token: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof userSubscriptionSubTokenGet>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUserSubscriptionSubTokenGetQueryOptions(
    token,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary User Subscription Info
 */
export const userSubscriptionInfoSubTokenInfoGet = (
  token: string,
  signal?: AbortSignal
) => {
  return orvalFetcher<UserResponse>({
    url: `/sub/${token}/info`,
    method: "get",
    signal,
  });
};

export const getUserSubscriptionInfoSubTokenInfoGetQueryKey = (
  token: string
) => {
  return [`/sub/${token}/info`] as const;
};

export const getUserSubscriptionInfoSubTokenInfoGetQueryOptions = <
  TData = Awaited<ReturnType<typeof userSubscriptionInfoSubTokenInfoGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  token: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof userSubscriptionInfoSubTokenInfoGet>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getUserSubscriptionInfoSubTokenInfoGetQueryKey(token);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof userSubscriptionInfoSubTokenInfoGet>>
  > = ({ signal }) => userSubscriptionInfoSubTokenInfoGet(token, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!token,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof userSubscriptionInfoSubTokenInfoGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type UserSubscriptionInfoSubTokenInfoGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof userSubscriptionInfoSubTokenInfoGet>>
>;
export type UserSubscriptionInfoSubTokenInfoGetQueryError =
  ErrorType<HTTPValidationError>;

/**
 * @summary User Subscription Info
 */
export const useUserSubscriptionInfoSubTokenInfoGet = <
  TData = Awaited<ReturnType<typeof userSubscriptionInfoSubTokenInfoGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  token: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof userSubscriptionInfoSubTokenInfoGet>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUserSubscriptionInfoSubTokenInfoGetQueryOptions(
    token,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Subscription link, v2ray, clash, sing-box, outline and clash-meta supported
 * @summary User Subscription With Client Type
 */
export const userSubscriptionWithClientTypeSubTokenClientTypeGet = (
  token: string,
  clientType: string,
  signal?: AbortSignal
) => {
  return orvalFetcher<unknown>({
    url: `/sub/${token}/${clientType}`,
    method: "get",
    signal,
  });
};

export const getUserSubscriptionWithClientTypeSubTokenClientTypeGetQueryKey = (
  token: string,
  clientType: string
) => {
  return [`/sub/${token}/${clientType}`] as const;
};

export const getUserSubscriptionWithClientTypeSubTokenClientTypeGetQueryOptions =
  <
    TData = Awaited<
      ReturnType<typeof userSubscriptionWithClientTypeSubTokenClientTypeGet>
    >,
    TError = ErrorType<void | HTTPValidationError>
  >(
    token: string,
    clientType: string,
    options?: {
      query?: UseQueryOptions<
        Awaited<
          ReturnType<typeof userSubscriptionWithClientTypeSubTokenClientTypeGet>
        >,
        TError,
        TData
      >;
    }
  ) => {
    const { query: queryOptions } = options ?? {};

    const queryKey =
      queryOptions?.queryKey ??
      getUserSubscriptionWithClientTypeSubTokenClientTypeGetQueryKey(
        token,
        clientType
      );

    const queryFn: QueryFunction<
      Awaited<
        ReturnType<typeof userSubscriptionWithClientTypeSubTokenClientTypeGet>
      >
    > = ({ signal }) =>
      userSubscriptionWithClientTypeSubTokenClientTypeGet(
        token,
        clientType,
        signal
      );

    return {
      queryKey,
      queryFn,
      enabled: !!(token && clientType),
      ...queryOptions,
    } as UseQueryOptions<
      Awaited<
        ReturnType<typeof userSubscriptionWithClientTypeSubTokenClientTypeGet>
      >,
      TError,
      TData
    > & { queryKey: QueryKey };
  };

export type UserSubscriptionWithClientTypeSubTokenClientTypeGetQueryResult =
  NonNullable<
    Awaited<
      ReturnType<typeof userSubscriptionWithClientTypeSubTokenClientTypeGet>
    >
  >;
export type UserSubscriptionWithClientTypeSubTokenClientTypeGetQueryError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary User Subscription With Client Type
 */
export const useUserSubscriptionWithClientTypeSubTokenClientTypeGet = <
  TData = Awaited<
    ReturnType<typeof userSubscriptionWithClientTypeSubTokenClientTypeGet>
  >,
  TError = ErrorType<void | HTTPValidationError>
>(
  token: string,
  clientType: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<
        ReturnType<typeof userSubscriptionWithClientTypeSubTokenClientTypeGet>
      >,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions =
    getUserSubscriptionWithClientTypeSubTokenClientTypeGetQueryOptions(
      token,
      clientType,
      options
    );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get System Stats
 */
export const getSystemStatsApiSystemGet = (signal?: AbortSignal) => {
  return orvalFetcher<SystemStats>({
    url: `/api/system`,
    method: "get",
    signal,
  });
};

export const getGetSystemStatsApiSystemGetQueryKey = () => {
  return [`/api/system`] as const;
};

export const getGetSystemStatsApiSystemGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getSystemStatsApiSystemGet>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getSystemStatsApiSystemGet>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetSystemStatsApiSystemGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSystemStatsApiSystemGet>>
  > = ({ signal }) => getSystemStatsApiSystemGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getSystemStatsApiSystemGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetSystemStatsApiSystemGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSystemStatsApiSystemGet>>
>;
export type GetSystemStatsApiSystemGetQueryError = ErrorType<unknown>;

/**
 * @summary Get System Stats
 */
export const useGetSystemStatsApiSystemGet = <
  TData = Awaited<ReturnType<typeof getSystemStatsApiSystemGet>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getSystemStatsApiSystemGet>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSystemStatsApiSystemGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Inbounds
 */
export const getInboundsApiInboundsGet = (signal?: AbortSignal) => {
  return orvalFetcher<GetInboundsApiInboundsGet200>({
    url: `/api/inbounds`,
    method: "get",
    signal,
  });
};

export const getGetInboundsApiInboundsGetQueryKey = () => {
  return [`/api/inbounds`] as const;
};

export const getGetInboundsApiInboundsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getInboundsApiInboundsGet>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getInboundsApiInboundsGet>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetInboundsApiInboundsGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getInboundsApiInboundsGet>>
  > = ({ signal }) => getInboundsApiInboundsGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getInboundsApiInboundsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetInboundsApiInboundsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getInboundsApiInboundsGet>>
>;
export type GetInboundsApiInboundsGetQueryError = ErrorType<unknown>;

/**
 * @summary Get Inbounds
 */
export const useGetInboundsApiInboundsGet = <
  TData = Awaited<ReturnType<typeof getInboundsApiInboundsGet>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getInboundsApiInboundsGet>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetInboundsApiInboundsGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Get Hosts
 */
export const getHostsApiHostsGet = (signal?: AbortSignal) => {
  return orvalFetcher<GetHostsApiHostsGet200>({
    url: `/api/hosts`,
    method: "get",
    signal,
  });
};

export const getGetHostsApiHostsGetQueryKey = () => {
  return [`/api/hosts`] as const;
};

export const getGetHostsApiHostsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getHostsApiHostsGet>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getHostsApiHostsGet>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetHostsApiHostsGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getHostsApiHostsGet>>
  > = ({ signal }) => getHostsApiHostsGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHostsApiHostsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetHostsApiHostsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getHostsApiHostsGet>>
>;
export type GetHostsApiHostsGetQueryError = ErrorType<unknown>;

/**
 * @summary Get Hosts
 */
export const useGetHostsApiHostsGet = <
  TData = Awaited<ReturnType<typeof getHostsApiHostsGet>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getHostsApiHostsGet>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetHostsApiHostsGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Modify Hosts
 */
export const modifyHostsApiHostsPut = (
  modifyHostsApiHostsPutBody: BodyType<ModifyHostsApiHostsPutBody>
) => {
  return orvalFetcher<ModifyHostsApiHostsPut200>({
    url: `/api/hosts`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: modifyHostsApiHostsPutBody,
  });
};

export const getModifyHostsApiHostsPutMutationOptions = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof modifyHostsApiHostsPut>>,
    TError,
    { data: BodyType<ModifyHostsApiHostsPutBody> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof modifyHostsApiHostsPut>>,
  TError,
  { data: BodyType<ModifyHostsApiHostsPutBody> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof modifyHostsApiHostsPut>>,
    { data: BodyType<ModifyHostsApiHostsPutBody> }
  > = (props) => {
    const { data } = props ?? {};

    return modifyHostsApiHostsPut(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ModifyHostsApiHostsPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof modifyHostsApiHostsPut>>
>;
export type ModifyHostsApiHostsPutMutationBody =
  BodyType<ModifyHostsApiHostsPutBody>;
export type ModifyHostsApiHostsPutMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Modify Hosts
 */
export const useModifyHostsApiHostsPut = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof modifyHostsApiHostsPut>>,
    TError,
    { data: BodyType<ModifyHostsApiHostsPutBody> },
    TContext
  >;
}) => {
  const mutationOptions = getModifyHostsApiHostsPutMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get Core Stats
 */
export const getCoreStatsApiCoreGet = (signal?: AbortSignal) => {
  return orvalFetcher<CoreStats>({ url: `/api/core`, method: "get", signal });
};

export const getGetCoreStatsApiCoreGetQueryKey = () => {
  return [`/api/core`] as const;
};

export const getGetCoreStatsApiCoreGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getCoreStatsApiCoreGet>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getCoreStatsApiCoreGet>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCoreStatsApiCoreGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCoreStatsApiCoreGet>>
  > = ({ signal }) => getCoreStatsApiCoreGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCoreStatsApiCoreGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCoreStatsApiCoreGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCoreStatsApiCoreGet>>
>;
export type GetCoreStatsApiCoreGetQueryError = ErrorType<unknown>;

/**
 * @summary Get Core Stats
 */
export const useGetCoreStatsApiCoreGet = <
  TData = Awaited<ReturnType<typeof getCoreStatsApiCoreGet>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getCoreStatsApiCoreGet>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCoreStatsApiCoreGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Restart Core
 */
export const restartCoreApiCoreRestartPost = () => {
  return orvalFetcher<unknown>({ url: `/api/core/restart`, method: "post" });
};

export const getRestartCoreApiCoreRestartPostMutationOptions = <
  TError = ErrorType<void>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof restartCoreApiCoreRestartPost>>,
    TError,
    TVariables,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof restartCoreApiCoreRestartPost>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof restartCoreApiCoreRestartPost>>,
    TVariables
  > = () => {
    return restartCoreApiCoreRestartPost();
  };

  return { mutationFn, ...mutationOptions };
};

export type RestartCoreApiCoreRestartPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof restartCoreApiCoreRestartPost>>
>;

export type RestartCoreApiCoreRestartPostMutationError = ErrorType<void>;

/**
 * @summary Restart Core
 */
export const useRestartCoreApiCoreRestartPost = <
  TError = ErrorType<void>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof restartCoreApiCoreRestartPost>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const mutationOptions =
    getRestartCoreApiCoreRestartPostMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get Core Config
 */
export const getCoreConfigApiCoreConfigGet = (signal?: AbortSignal) => {
  return orvalFetcher<GetCoreConfigApiCoreConfigGet200>({
    url: `/api/core/config`,
    method: "get",
    signal,
  });
};

export const getGetCoreConfigApiCoreConfigGetQueryKey = () => {
  return [`/api/core/config`] as const;
};

export const getGetCoreConfigApiCoreConfigGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getCoreConfigApiCoreConfigGet>>,
  TError = ErrorType<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getCoreConfigApiCoreConfigGet>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetCoreConfigApiCoreConfigGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getCoreConfigApiCoreConfigGet>>
  > = ({ signal }) => getCoreConfigApiCoreConfigGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getCoreConfigApiCoreConfigGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetCoreConfigApiCoreConfigGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCoreConfigApiCoreConfigGet>>
>;
export type GetCoreConfigApiCoreConfigGetQueryError = ErrorType<void>;

/**
 * @summary Get Core Config
 */
export const useGetCoreConfigApiCoreConfigGet = <
  TData = Awaited<ReturnType<typeof getCoreConfigApiCoreConfigGet>>,
  TError = ErrorType<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getCoreConfigApiCoreConfigGet>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetCoreConfigApiCoreConfigGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Modify Core Config
 */
export const modifyCoreConfigApiCoreConfigPut = (
  modifyCoreConfigApiCoreConfigPutBody: BodyType<ModifyCoreConfigApiCoreConfigPutBody>
) => {
  return orvalFetcher<ModifyCoreConfigApiCoreConfigPut200>({
    url: `/api/core/config`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: modifyCoreConfigApiCoreConfigPutBody,
  });
};

export const getModifyCoreConfigApiCoreConfigPutMutationOptions = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof modifyCoreConfigApiCoreConfigPut>>,
    TError,
    { data: BodyType<ModifyCoreConfigApiCoreConfigPutBody> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof modifyCoreConfigApiCoreConfigPut>>,
  TError,
  { data: BodyType<ModifyCoreConfigApiCoreConfigPutBody> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof modifyCoreConfigApiCoreConfigPut>>,
    { data: BodyType<ModifyCoreConfigApiCoreConfigPutBody> }
  > = (props) => {
    const { data } = props ?? {};

    return modifyCoreConfigApiCoreConfigPut(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ModifyCoreConfigApiCoreConfigPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof modifyCoreConfigApiCoreConfigPut>>
>;
export type ModifyCoreConfigApiCoreConfigPutMutationBody =
  BodyType<ModifyCoreConfigApiCoreConfigPutBody>;
export type ModifyCoreConfigApiCoreConfigPutMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Modify Core Config
 */
export const useModifyCoreConfigApiCoreConfigPut = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof modifyCoreConfigApiCoreConfigPut>>,
    TError,
    { data: BodyType<ModifyCoreConfigApiCoreConfigPutBody> },
    TContext
  >;
}) => {
  const mutationOptions =
    getModifyCoreConfigApiCoreConfigPutMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Add a new user

- **username** must have 3 to 32 characters and is allowed to contain a-z, 0-9, and underscores in between
- **expire** must be an UTC timestamp
- **data_limit** must be in Bytes, e.g. 1073741824B = 1GB
- **proxies** dictionary of protocol:settings
- **inbounds** dictionary of protocol:inbound_tags, empty means all inbounds
 * @summary Add User
 */
export const addUserApiUserPost = (userCreate: BodyType<UserCreate>) => {
  return orvalFetcher<UserResponse>({
    url: `/api/user`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: userCreate,
  });
};

export const getAddUserApiUserPostMutationOptions = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addUserApiUserPost>>,
    TError,
    { data: BodyType<UserCreate> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addUserApiUserPost>>,
  TError,
  { data: BodyType<UserCreate> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addUserApiUserPost>>,
    { data: BodyType<UserCreate> }
  > = (props) => {
    const { data } = props ?? {};

    return addUserApiUserPost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddUserApiUserPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addUserApiUserPost>>
>;
export type AddUserApiUserPostMutationBody = BodyType<UserCreate>;
export type AddUserApiUserPostMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Add User
 */
export const useAddUserApiUserPost = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addUserApiUserPost>>,
    TError,
    { data: BodyType<UserCreate> },
    TContext
  >;
}) => {
  const mutationOptions = getAddUserApiUserPostMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get users information
 * @summary Get User
 */
export const getUserApiUserUsernameGet = (
  username: string,
  signal?: AbortSignal
) => {
  return orvalFetcher<UserResponse>({
    url: `/api/user/${username}`,
    method: "get",
    signal,
  });
};

export const getGetUserApiUserUsernameGetQueryKey = (username: string) => {
  return [`/api/user/${username}`] as const;
};

export const getGetUserApiUserUsernameGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserApiUserUsernameGet>>,
  TError = ErrorType<void | HTTPValidationError>
>(
  username: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUserApiUserUsernameGet>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUserApiUserUsernameGetQueryKey(username);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserApiUserUsernameGet>>
  > = ({ signal }) => getUserApiUserUsernameGet(username, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!username,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserApiUserUsernameGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserApiUserUsernameGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserApiUserUsernameGet>>
>;
export type GetUserApiUserUsernameGetQueryError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Get User
 */
export const useGetUserApiUserUsernameGet = <
  TData = Awaited<ReturnType<typeof getUserApiUserUsernameGet>>,
  TError = ErrorType<void | HTTPValidationError>
>(
  username: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUserApiUserUsernameGet>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUserApiUserUsernameGetQueryOptions(
    username,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Modify a user

- set **expire** to 0 to make the user unlimited in time, null to no change
- set **data_limit** to 0 to make the user unlimited in data, null to no change
- **proxies** dictionary of protocol:settings, empty means no change
- **inbounds** dictionary of protocol:inbound_tags, empty means no change
 * @summary Modify User
 */
export const modifyUserApiUserUsernamePut = (
  username: string,
  userModify: BodyType<UserModify>
) => {
  return orvalFetcher<UserResponse>({
    url: `/api/user/${username}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: userModify,
  });
};

export const getModifyUserApiUserUsernamePutMutationOptions = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof modifyUserApiUserUsernamePut>>,
    TError,
    { username: string; data: BodyType<UserModify> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof modifyUserApiUserUsernamePut>>,
  TError,
  { username: string; data: BodyType<UserModify> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof modifyUserApiUserUsernamePut>>,
    { username: string; data: BodyType<UserModify> }
  > = (props) => {
    const { username, data } = props ?? {};

    return modifyUserApiUserUsernamePut(username, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ModifyUserApiUserUsernamePutMutationResult = NonNullable<
  Awaited<ReturnType<typeof modifyUserApiUserUsernamePut>>
>;
export type ModifyUserApiUserUsernamePutMutationBody = BodyType<UserModify>;
export type ModifyUserApiUserUsernamePutMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Modify User
 */
export const useModifyUserApiUserUsernamePut = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof modifyUserApiUserUsernamePut>>,
    TError,
    { username: string; data: BodyType<UserModify> },
    TContext
  >;
}) => {
  const mutationOptions =
    getModifyUserApiUserUsernamePutMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Remove a user
 * @summary Remove User
 */
export const removeUserApiUserUsernameDelete = (username: string) => {
  return orvalFetcher<unknown>({
    url: `/api/user/${username}`,
    method: "delete",
  });
};

export const getRemoveUserApiUserUsernameDeleteMutationOptions = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeUserApiUserUsernameDelete>>,
    TError,
    { username: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeUserApiUserUsernameDelete>>,
  TError,
  { username: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeUserApiUserUsernameDelete>>,
    { username: string }
  > = (props) => {
    const { username } = props ?? {};

    return removeUserApiUserUsernameDelete(username);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveUserApiUserUsernameDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeUserApiUserUsernameDelete>>
>;

export type RemoveUserApiUserUsernameDeleteMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Remove User
 */
export const useRemoveUserApiUserUsernameDelete = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeUserApiUserUsernameDelete>>,
    TError,
    { username: string },
    TContext
  >;
}) => {
  const mutationOptions =
    getRemoveUserApiUserUsernameDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Reset user data usage
 * @summary Reset User Data Usage
 */
export const resetUserDataUsageApiUserUsernameResetPost = (
  username: string
) => {
  return orvalFetcher<UserResponse>({
    url: `/api/user/${username}/reset`,
    method: "post",
  });
};

export const getResetUserDataUsageApiUserUsernameResetPostMutationOptions = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resetUserDataUsageApiUserUsernameResetPost>>,
    TError,
    { username: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof resetUserDataUsageApiUserUsernameResetPost>>,
  TError,
  { username: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof resetUserDataUsageApiUserUsernameResetPost>>,
    { username: string }
  > = (props) => {
    const { username } = props ?? {};

    return resetUserDataUsageApiUserUsernameResetPost(username);
  };

  return { mutationFn, ...mutationOptions };
};

export type ResetUserDataUsageApiUserUsernameResetPostMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof resetUserDataUsageApiUserUsernameResetPost>>
  >;

export type ResetUserDataUsageApiUserUsernameResetPostMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Reset User Data Usage
 */
export const useResetUserDataUsageApiUserUsernameResetPost = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resetUserDataUsageApiUserUsernameResetPost>>,
    TError,
    { username: string },
    TContext
  >;
}) => {
  const mutationOptions =
    getResetUserDataUsageApiUserUsernameResetPostMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Revoke users subscription (Subscription link and proxies)
 * @summary Revoke User Subscription
 */
export const revokeUserSubscriptionApiUserUsernameRevokeSubPost = (
  username: string
) => {
  return orvalFetcher<UserResponse>({
    url: `/api/user/${username}/revoke_sub`,
    method: "post",
  });
};

export const getRevokeUserSubscriptionApiUserUsernameRevokeSubPostMutationOptions =
  <
    TError = ErrorType<void | HTTPValidationError>,
    TContext = unknown
  >(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof revokeUserSubscriptionApiUserUsernameRevokeSubPost>
      >,
      TError,
      { username: string },
      TContext
    >;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof revokeUserSubscriptionApiUserUsernameRevokeSubPost>
    >,
    TError,
    { username: string },
    TContext
  > => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof revokeUserSubscriptionApiUserUsernameRevokeSubPost>
      >,
      { username: string }
    > = (props) => {
      const { username } = props ?? {};

      return revokeUserSubscriptionApiUserUsernameRevokeSubPost(username);
    };

    return { mutationFn, ...mutationOptions };
  };

export type RevokeUserSubscriptionApiUserUsernameRevokeSubPostMutationResult =
  NonNullable<
    Awaited<
      ReturnType<typeof revokeUserSubscriptionApiUserUsernameRevokeSubPost>
    >
  >;

export type RevokeUserSubscriptionApiUserUsernameRevokeSubPostMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Revoke User Subscription
 */
export const useRevokeUserSubscriptionApiUserUsernameRevokeSubPost = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<
      ReturnType<typeof revokeUserSubscriptionApiUserUsernameRevokeSubPost>
    >,
    TError,
    { username: string },
    TContext
  >;
}) => {
  const mutationOptions =
    getRevokeUserSubscriptionApiUserUsernameRevokeSubPostMutationOptions(
      options
    );

  return useMutation(mutationOptions);
};

/**
 * Get all users
 * @summary Get Users
 */
export const getUsersApiUsersGet = (
  params?: GetUsersApiUsersGetParams,
  signal?: AbortSignal
) => {
  return orvalFetcher<UsersResponse>({
    url: `/api/users`,
    method: "get",
    params,
    signal,
  });
};

export const getGetUsersApiUsersGetQueryKey = (
  params?: GetUsersApiUsersGetParams
) => {
  return [`/api/users`, ...(params ? [params] : [])] as const;
};

export const getGetUsersApiUsersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsersApiUsersGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  params?: GetUsersApiUsersGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersApiUsersGet>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUsersApiUsersGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUsersApiUsersGet>>
  > = ({ signal }) => getUsersApiUsersGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsersApiUsersGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsersApiUsersGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsersApiUsersGet>>
>;
export type GetUsersApiUsersGetQueryError = ErrorType<HTTPValidationError>;

/**
 * @summary Get Users
 */
export const useGetUsersApiUsersGet = <
  TData = Awaited<ReturnType<typeof getUsersApiUsersGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  params?: GetUsersApiUsersGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsersApiUsersGet>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUsersApiUsersGetQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Reset all users data usage
 * @summary Reset Users Data Usage
 */
export const resetUsersDataUsageApiUsersResetPost = () => {
  return orvalFetcher<unknown>({ url: `/api/users/reset`, method: "post" });
};

export const getResetUsersDataUsageApiUsersResetPostMutationOptions = <
  TError = ErrorType<void>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resetUsersDataUsageApiUsersResetPost>>,
    TError,
    TVariables,
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof resetUsersDataUsageApiUsersResetPost>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof resetUsersDataUsageApiUsersResetPost>>,
    TVariables
  > = () => {
    return resetUsersDataUsageApiUsersResetPost();
  };

  return { mutationFn, ...mutationOptions };
};

export type ResetUsersDataUsageApiUsersResetPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof resetUsersDataUsageApiUsersResetPost>>
>;

export type ResetUsersDataUsageApiUsersResetPostMutationError = ErrorType<void>;

/**
 * @summary Reset Users Data Usage
 */
export const useResetUsersDataUsageApiUsersResetPost = <
  TError = ErrorType<void>,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof resetUsersDataUsageApiUsersResetPost>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const mutationOptions =
    getResetUsersDataUsageApiUsersResetPostMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get users usage
 * @summary Get User Usage
 */
export const getUserUsageApiUserUsernameUsageGet = (
  username: string,
  params?: GetUserUsageApiUserUsernameUsageGetParams,
  signal?: AbortSignal
) => {
  return orvalFetcher<UserUsagesResponse>({
    url: `/api/user/${username}/usage`,
    method: "get",
    params,
    signal,
  });
};

export const getGetUserUsageApiUserUsernameUsageGetQueryKey = (
  username: string,
  params?: GetUserUsageApiUserUsernameUsageGetParams
) => {
  return [`/api/user/${username}/usage`, ...(params ? [params] : [])] as const;
};

export const getGetUserUsageApiUserUsernameUsageGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserUsageApiUserUsernameUsageGet>>,
  TError = ErrorType<void | HTTPValidationError>
>(
  username: string,
  params?: GetUserUsageApiUserUsernameUsageGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUserUsageApiUserUsernameUsageGet>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetUserUsageApiUserUsernameUsageGetQueryKey(username, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserUsageApiUserUsernameUsageGet>>
  > = ({ signal }) =>
    getUserUsageApiUserUsernameUsageGet(username, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!username,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserUsageApiUserUsernameUsageGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserUsageApiUserUsernameUsageGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserUsageApiUserUsernameUsageGet>>
>;
export type GetUserUsageApiUserUsernameUsageGetQueryError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Get User Usage
 */
export const useGetUserUsageApiUserUsernameUsageGet = <
  TData = Awaited<ReturnType<typeof getUserUsageApiUserUsernameUsageGet>>,
  TError = ErrorType<void | HTTPValidationError>
>(
  username: string,
  params?: GetUserUsageApiUserUsernameUsageGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUserUsageApiUserUsernameUsageGet>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUserUsageApiUserUsernameUsageGetQueryOptions(
    username,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Set Owner
 */
export const setOwnerApiUserUsernameSetOwnerPut = (
  username: string,
  params: SetOwnerApiUserUsernameSetOwnerPutParams
) => {
  return orvalFetcher<UserResponse>({
    url: `/api/user/${username}/set-owner`,
    method: "put",
    params,
  });
};

export const getSetOwnerApiUserUsernameSetOwnerPutMutationOptions = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setOwnerApiUserUsernameSetOwnerPut>>,
    TError,
    { username: string; params: SetOwnerApiUserUsernameSetOwnerPutParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof setOwnerApiUserUsernameSetOwnerPut>>,
  TError,
  { username: string; params: SetOwnerApiUserUsernameSetOwnerPutParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setOwnerApiUserUsernameSetOwnerPut>>,
    { username: string; params: SetOwnerApiUserUsernameSetOwnerPutParams }
  > = (props) => {
    const { username, params } = props ?? {};

    return setOwnerApiUserUsernameSetOwnerPut(username, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type SetOwnerApiUserUsernameSetOwnerPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof setOwnerApiUserUsernameSetOwnerPut>>
>;

export type SetOwnerApiUserUsernameSetOwnerPutMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Set Owner
 */
export const useSetOwnerApiUserUsernameSetOwnerPut = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setOwnerApiUserUsernameSetOwnerPut>>,
    TError,
    { username: string; params: SetOwnerApiUserUsernameSetOwnerPutParams },
    TContext
  >;
}) => {
  const mutationOptions =
    getSetOwnerApiUserUsernameSetOwnerPutMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Delete expired users
- **passed_time** must be a timestamp
- This function will delete all expired users that meet the specified number of days passed and can't be undone.
 * @summary Delete Expired
 */
export const deleteExpiredApiUsersExpiredDelete = (
  params: DeleteExpiredApiUsersExpiredDeleteParams
) => {
  return orvalFetcher<unknown>({
    url: `/api/users/expired`,
    method: "delete",
    params,
  });
};

export const getDeleteExpiredApiUsersExpiredDeleteMutationOptions = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteExpiredApiUsersExpiredDelete>>,
    TError,
    { params: DeleteExpiredApiUsersExpiredDeleteParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteExpiredApiUsersExpiredDelete>>,
  TError,
  { params: DeleteExpiredApiUsersExpiredDeleteParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteExpiredApiUsersExpiredDelete>>,
    { params: DeleteExpiredApiUsersExpiredDeleteParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteExpiredApiUsersExpiredDelete(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteExpiredApiUsersExpiredDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteExpiredApiUsersExpiredDelete>>
>;

export type DeleteExpiredApiUsersExpiredDeleteMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Delete Expired
 */
export const useDeleteExpiredApiUsersExpiredDelete = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteExpiredApiUsersExpiredDelete>>,
    TError,
    { params: DeleteExpiredApiUsersExpiredDeleteParams },
    TContext
  >;
}) => {
  const mutationOptions =
    getDeleteExpiredApiUsersExpiredDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get User Templates
 */
export const getUserTemplatesApiUserTemplateGet = (
  params?: GetUserTemplatesApiUserTemplateGetParams,
  signal?: AbortSignal
) => {
  return orvalFetcher<UserTemplateResponse[]>({
    url: `/api/user_template`,
    method: "get",
    params,
    signal,
  });
};

export const getGetUserTemplatesApiUserTemplateGetQueryKey = (
  params?: GetUserTemplatesApiUserTemplateGetParams
) => {
  return [`/api/user_template`, ...(params ? [params] : [])] as const;
};

export const getGetUserTemplatesApiUserTemplateGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserTemplatesApiUserTemplateGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  params?: GetUserTemplatesApiUserTemplateGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUserTemplatesApiUserTemplateGet>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetUserTemplatesApiUserTemplateGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserTemplatesApiUserTemplateGet>>
  > = ({ signal }) => getUserTemplatesApiUserTemplateGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserTemplatesApiUserTemplateGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserTemplatesApiUserTemplateGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserTemplatesApiUserTemplateGet>>
>;
export type GetUserTemplatesApiUserTemplateGetQueryError =
  ErrorType<HTTPValidationError>;

/**
 * @summary Get User Templates
 */
export const useGetUserTemplatesApiUserTemplateGet = <
  TData = Awaited<ReturnType<typeof getUserTemplatesApiUserTemplateGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  params?: GetUserTemplatesApiUserTemplateGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUserTemplatesApiUserTemplateGet>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUserTemplatesApiUserTemplateGetQueryOptions(
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Add a new user template

- **name** can be up to 64 characters
- **data_limit** must be in bytes and larger or equal to 0
- **expire_duration** must be in seconds and larger or equat to 0
- **inbounds** dictionary of protocol:inbound_tags, empty means all inbounds
 * @summary Add User Template
 */
export const addUserTemplateApiUserTemplatePost = (
  userTemplateCreate: BodyType<UserTemplateCreate>
) => {
  return orvalFetcher<UserTemplateResponse>({
    url: `/api/user_template`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: userTemplateCreate,
  });
};

export const getAddUserTemplateApiUserTemplatePostMutationOptions = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addUserTemplateApiUserTemplatePost>>,
    TError,
    { data: BodyType<UserTemplateCreate> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addUserTemplateApiUserTemplatePost>>,
  TError,
  { data: BodyType<UserTemplateCreate> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addUserTemplateApiUserTemplatePost>>,
    { data: BodyType<UserTemplateCreate> }
  > = (props) => {
    const { data } = props ?? {};

    return addUserTemplateApiUserTemplatePost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddUserTemplateApiUserTemplatePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addUserTemplateApiUserTemplatePost>>
>;
export type AddUserTemplateApiUserTemplatePostMutationBody =
  BodyType<UserTemplateCreate>;
export type AddUserTemplateApiUserTemplatePostMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Add User Template
 */
export const useAddUserTemplateApiUserTemplatePost = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addUserTemplateApiUserTemplatePost>>,
    TError,
    { data: BodyType<UserTemplateCreate> },
    TContext
  >;
}) => {
  const mutationOptions =
    getAddUserTemplateApiUserTemplatePostMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get User Template information with id
 * @summary Get User Template
 */
export const getUserTemplateApiUserTemplateIdGet = (
  id: number,
  signal?: AbortSignal
) => {
  return orvalFetcher<UserTemplateResponse>({
    url: `/api/user_template/${id}`,
    method: "get",
    signal,
  });
};

export const getGetUserTemplateApiUserTemplateIdGetQueryKey = (id: number) => {
  return [`/api/user_template/${id}`] as const;
};

export const getGetUserTemplateApiUserTemplateIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getUserTemplateApiUserTemplateIdGet>>,
  TError = ErrorType<void | HTTPValidationError>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUserTemplateApiUserTemplateIdGet>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetUserTemplateApiUserTemplateIdGetQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUserTemplateApiUserTemplateIdGet>>
  > = ({ signal }) => getUserTemplateApiUserTemplateIdGet(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getUserTemplateApiUserTemplateIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUserTemplateApiUserTemplateIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserTemplateApiUserTemplateIdGet>>
>;
export type GetUserTemplateApiUserTemplateIdGetQueryError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Get User Template
 */
export const useGetUserTemplateApiUserTemplateIdGet = <
  TData = Awaited<ReturnType<typeof getUserTemplateApiUserTemplateIdGet>>,
  TError = ErrorType<void | HTTPValidationError>
>(
  id: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUserTemplateApiUserTemplateIdGet>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUserTemplateApiUserTemplateIdGetQueryOptions(
    id,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Modify User Template

- **name** can be up to 64 characters
- **data_limit** must be in bytes and larger or equal to 0
- **expire_duration** must be in seconds and larger or equat to 0
- **inbounds** dictionary of protocol:inbound_tags, empty means all inbounds
 * @summary Modify User Template
 */
export const modifyUserTemplateApiUserTemplateIdPut = (
  id: number,
  userTemplateModify: BodyType<UserTemplateModify>
) => {
  return orvalFetcher<UserTemplateResponse>({
    url: `/api/user_template/${id}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: userTemplateModify,
  });
};

export const getModifyUserTemplateApiUserTemplateIdPutMutationOptions = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof modifyUserTemplateApiUserTemplateIdPut>>,
    TError,
    { id: number; data: BodyType<UserTemplateModify> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof modifyUserTemplateApiUserTemplateIdPut>>,
  TError,
  { id: number; data: BodyType<UserTemplateModify> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof modifyUserTemplateApiUserTemplateIdPut>>,
    { id: number; data: BodyType<UserTemplateModify> }
  > = (props) => {
    const { id, data } = props ?? {};

    return modifyUserTemplateApiUserTemplateIdPut(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ModifyUserTemplateApiUserTemplateIdPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof modifyUserTemplateApiUserTemplateIdPut>>
>;
export type ModifyUserTemplateApiUserTemplateIdPutMutationBody =
  BodyType<UserTemplateModify>;
export type ModifyUserTemplateApiUserTemplateIdPutMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Modify User Template
 */
export const useModifyUserTemplateApiUserTemplateIdPut = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof modifyUserTemplateApiUserTemplateIdPut>>,
    TError,
    { id: number; data: BodyType<UserTemplateModify> },
    TContext
  >;
}) => {
  const mutationOptions =
    getModifyUserTemplateApiUserTemplateIdPutMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Remove User Template
 */
export const removeUserTemplateApiUserTemplateIdDelete = (id: number) => {
  return orvalFetcher<unknown>({
    url: `/api/user_template/${id}`,
    method: "delete",
  });
};

export const getRemoveUserTemplateApiUserTemplateIdDeleteMutationOptions = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeUserTemplateApiUserTemplateIdDelete>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeUserTemplateApiUserTemplateIdDelete>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeUserTemplateApiUserTemplateIdDelete>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return removeUserTemplateApiUserTemplateIdDelete(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveUserTemplateApiUserTemplateIdDeleteMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof removeUserTemplateApiUserTemplateIdDelete>>
  >;

export type RemoveUserTemplateApiUserTemplateIdDeleteMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Remove User Template
 */
export const useRemoveUserTemplateApiUserTemplateIdDelete = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeUserTemplateApiUserTemplateIdDelete>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const mutationOptions =
    getRemoveUserTemplateApiUserTemplateIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get Node
 */
export const getNodeApiNodeSettingsGet = (signal?: AbortSignal) => {
  return orvalFetcher<NodeSettings>({
    url: `/api/node/settings`,
    method: "get",
    signal,
  });
};

export const getGetNodeApiNodeSettingsGetQueryKey = () => {
  return [`/api/node/settings`] as const;
};

export const getGetNodeApiNodeSettingsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getNodeApiNodeSettingsGet>>,
  TError = ErrorType<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getNodeApiNodeSettingsGet>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetNodeApiNodeSettingsGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNodeApiNodeSettingsGet>>
  > = ({ signal }) => getNodeApiNodeSettingsGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getNodeApiNodeSettingsGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNodeApiNodeSettingsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNodeApiNodeSettingsGet>>
>;
export type GetNodeApiNodeSettingsGetQueryError = ErrorType<void>;

/**
 * @summary Get Node
 */
export const useGetNodeApiNodeSettingsGet = <
  TData = Awaited<ReturnType<typeof getNodeApiNodeSettingsGet>>,
  TError = ErrorType<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getNodeApiNodeSettingsGet>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetNodeApiNodeSettingsGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Add Node
 */
export const addNodeApiNodePost = (nodeCreate: BodyType<NodeCreate>) => {
  return orvalFetcher<NodeResponse>({
    url: `/api/node`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: nodeCreate,
  });
};

export const getAddNodeApiNodePostMutationOptions = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addNodeApiNodePost>>,
    TError,
    { data: BodyType<NodeCreate> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addNodeApiNodePost>>,
  TError,
  { data: BodyType<NodeCreate> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addNodeApiNodePost>>,
    { data: BodyType<NodeCreate> }
  > = (props) => {
    const { data } = props ?? {};

    return addNodeApiNodePost(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddNodeApiNodePostMutationResult = NonNullable<
  Awaited<ReturnType<typeof addNodeApiNodePost>>
>;
export type AddNodeApiNodePostMutationBody = BodyType<NodeCreate>;
export type AddNodeApiNodePostMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Add Node
 */
export const useAddNodeApiNodePost = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addNodeApiNodePost>>,
    TError,
    { data: BodyType<NodeCreate> },
    TContext
  >;
}) => {
  const mutationOptions = getAddNodeApiNodePostMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get Node
 */
export const getNodeApiNodeNodeIdGet = (
  nodeId: number,
  signal?: AbortSignal
) => {
  return orvalFetcher<NodeResponse>({
    url: `/api/node/${nodeId}`,
    method: "get",
    signal,
  });
};

export const getGetNodeApiNodeNodeIdGetQueryKey = (nodeId: number) => {
  return [`/api/node/${nodeId}`] as const;
};

export const getGetNodeApiNodeNodeIdGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getNodeApiNodeNodeIdGet>>,
  TError = ErrorType<void | HTTPValidationError>
>(
  nodeId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getNodeApiNodeNodeIdGet>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetNodeApiNodeNodeIdGetQueryKey(nodeId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNodeApiNodeNodeIdGet>>
  > = ({ signal }) => getNodeApiNodeNodeIdGet(nodeId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!nodeId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getNodeApiNodeNodeIdGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNodeApiNodeNodeIdGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNodeApiNodeNodeIdGet>>
>;
export type GetNodeApiNodeNodeIdGetQueryError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Get Node
 */
export const useGetNodeApiNodeNodeIdGet = <
  TData = Awaited<ReturnType<typeof getNodeApiNodeNodeIdGet>>,
  TError = ErrorType<void | HTTPValidationError>
>(
  nodeId: number,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getNodeApiNodeNodeIdGet>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetNodeApiNodeNodeIdGetQueryOptions(nodeId, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Modify Node
 */
export const modifyNodeApiNodeNodeIdPut = (
  nodeId: number,
  nodeModify: BodyType<NodeModify>
) => {
  return orvalFetcher<NodeResponse>({
    url: `/api/node/${nodeId}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: nodeModify,
  });
};

export const getModifyNodeApiNodeNodeIdPutMutationOptions = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof modifyNodeApiNodeNodeIdPut>>,
    TError,
    { nodeId: number; data: BodyType<NodeModify> },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof modifyNodeApiNodeNodeIdPut>>,
  TError,
  { nodeId: number; data: BodyType<NodeModify> },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof modifyNodeApiNodeNodeIdPut>>,
    { nodeId: number; data: BodyType<NodeModify> }
  > = (props) => {
    const { nodeId, data } = props ?? {};

    return modifyNodeApiNodeNodeIdPut(nodeId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ModifyNodeApiNodeNodeIdPutMutationResult = NonNullable<
  Awaited<ReturnType<typeof modifyNodeApiNodeNodeIdPut>>
>;
export type ModifyNodeApiNodeNodeIdPutMutationBody = BodyType<NodeModify>;
export type ModifyNodeApiNodeNodeIdPutMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Modify Node
 */
export const useModifyNodeApiNodeNodeIdPut = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof modifyNodeApiNodeNodeIdPut>>,
    TError,
    { nodeId: number; data: BodyType<NodeModify> },
    TContext
  >;
}) => {
  const mutationOptions = getModifyNodeApiNodeNodeIdPutMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Remove Node
 */
export const removeNodeApiNodeNodeIdDelete = (nodeId: number) => {
  return orvalFetcher<unknown>({
    url: `/api/node/${nodeId}`,
    method: "delete",
  });
};

export const getRemoveNodeApiNodeNodeIdDeleteMutationOptions = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeNodeApiNodeNodeIdDelete>>,
    TError,
    { nodeId: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof removeNodeApiNodeNodeIdDelete>>,
  TError,
  { nodeId: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof removeNodeApiNodeNodeIdDelete>>,
    { nodeId: number }
  > = (props) => {
    const { nodeId } = props ?? {};

    return removeNodeApiNodeNodeIdDelete(nodeId);
  };

  return { mutationFn, ...mutationOptions };
};

export type RemoveNodeApiNodeNodeIdDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof removeNodeApiNodeNodeIdDelete>>
>;

export type RemoveNodeApiNodeNodeIdDeleteMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Remove Node
 */
export const useRemoveNodeApiNodeNodeIdDelete = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof removeNodeApiNodeNodeIdDelete>>,
    TError,
    { nodeId: number },
    TContext
  >;
}) => {
  const mutationOptions =
    getRemoveNodeApiNodeNodeIdDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * @summary Get Nodes
 */
export const getNodesApiNodesGet = (signal?: AbortSignal) => {
  return orvalFetcher<NodeResponse[]>({
    url: `/api/nodes`,
    method: "get",
    signal,
  });
};

export const getGetNodesApiNodesGetQueryKey = () => {
  return [`/api/nodes`] as const;
};

export const getGetNodesApiNodesGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getNodesApiNodesGet>>,
  TError = ErrorType<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getNodesApiNodesGet>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNodesApiNodesGetQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNodesApiNodesGet>>
  > = ({ signal }) => getNodesApiNodesGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getNodesApiNodesGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNodesApiNodesGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNodesApiNodesGet>>
>;
export type GetNodesApiNodesGetQueryError = ErrorType<void>;

/**
 * @summary Get Nodes
 */
export const useGetNodesApiNodesGet = <
  TData = Awaited<ReturnType<typeof getNodesApiNodesGet>>,
  TError = ErrorType<void>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getNodesApiNodesGet>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetNodesApiNodesGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Reconnect Node
 */
export const reconnectNodeApiNodeNodeIdReconnectPost = (nodeId: number) => {
  return orvalFetcher<unknown>({
    url: `/api/node/${nodeId}/reconnect`,
    method: "post",
  });
};

export const getReconnectNodeApiNodeNodeIdReconnectPostMutationOptions = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof reconnectNodeApiNodeNodeIdReconnectPost>>,
    TError,
    { nodeId: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof reconnectNodeApiNodeNodeIdReconnectPost>>,
  TError,
  { nodeId: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof reconnectNodeApiNodeNodeIdReconnectPost>>,
    { nodeId: number }
  > = (props) => {
    const { nodeId } = props ?? {};

    return reconnectNodeApiNodeNodeIdReconnectPost(nodeId);
  };

  return { mutationFn, ...mutationOptions };
};

export type ReconnectNodeApiNodeNodeIdReconnectPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof reconnectNodeApiNodeNodeIdReconnectPost>>
>;

export type ReconnectNodeApiNodeNodeIdReconnectPostMutationError =
  ErrorType<void | HTTPValidationError>;

/**
 * @summary Reconnect Node
 */
export const useReconnectNodeApiNodeNodeIdReconnectPost = <
  TError = ErrorType<void | HTTPValidationError>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof reconnectNodeApiNodeNodeIdReconnectPost>>,
    TError,
    { nodeId: number },
    TContext
  >;
}) => {
  const mutationOptions =
    getReconnectNodeApiNodeNodeIdReconnectPostMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Get nodes usage
 * @summary Get Usage
 */
export const getUsageApiNodesUsageGet = (
  params?: GetUsageApiNodesUsageGetParams,
  signal?: AbortSignal
) => {
  return orvalFetcher<NodesUsageResponse>({
    url: `/api/nodes/usage`,
    method: "get",
    params,
    signal,
  });
};

export const getGetUsageApiNodesUsageGetQueryKey = (
  params?: GetUsageApiNodesUsageGetParams
) => {
  return [`/api/nodes/usage`, ...(params ? [params] : [])] as const;
};

export const getGetUsageApiNodesUsageGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getUsageApiNodesUsageGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  params?: GetUsageApiNodesUsageGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsageApiNodesUsageGet>>,
      TError,
      TData
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetUsageApiNodesUsageGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getUsageApiNodesUsageGet>>
  > = ({ signal }) => getUsageApiNodesUsageGet(params, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getUsageApiNodesUsageGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetUsageApiNodesUsageGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsageApiNodesUsageGet>>
>;
export type GetUsageApiNodesUsageGetQueryError = ErrorType<HTTPValidationError>;

/**
 * @summary Get Usage
 */
export const useGetUsageApiNodesUsageGet = <
  TData = Awaited<ReturnType<typeof getUsageApiNodesUsageGet>>,
  TError = ErrorType<HTTPValidationError>
>(
  params?: GetUsageApiNodesUsageGetParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUsageApiNodesUsageGet>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetUsageApiNodesUsageGetQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary Base
 */
export const baseGet = (signal?: AbortSignal) => {
  return orvalFetcher<string>({ url: `/`, method: "get", signal });
};

export const getBaseGetQueryKey = () => {
  return [`/`] as const;
};

export const getBaseGetQueryOptions = <
  TData = Awaited<ReturnType<typeof baseGet>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof baseGet>>, TError, TData>;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getBaseGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof baseGet>>> = ({
    signal,
  }) => baseGet(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof baseGet>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type BaseGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof baseGet>>
>;
export type BaseGetQueryError = ErrorType<unknown>;

/**
 * @summary Base
 */
export const useBaseGet = <
  TData = Awaited<ReturnType<typeof baseGet>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof baseGet>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getBaseGetQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
